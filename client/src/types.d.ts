/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/auth/register": {
    post: operations["AuthController_create"];
  };
  "/api/auth/login": {
    post: operations["AuthController_login"];
  };
  "/api/auth/profile": {
    get: operations["AuthController_getProfile"];
  };
  "/api/auth/logout": {
    post: operations["AuthController_logout"];
  };
  "/api/task": {
    get: operations["TaskController_findAll"];
    post: operations["TaskController_create"];
  };
  "/api/task/{id}": {
    get: operations["TaskController_findOne"];
    put: operations["TaskController_update"];
    delete: operations["TaskController_remove"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    RegisterUserDto: {
      email: string;
      firstName: string;
      lastName: string;
      password: string;
    };
    MeEntity: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      deletedAt: string | null;
      isDeleted: boolean;
      firstName?: string;
      lastName?: string;
      email: string;
      fullName?: string;
      token?: string | null;
    };
    AuthLoginDto: {
      email: string;
      password: string;
    };
    MessageEntity: {
      message: string;
    };
    CreateTaskDto: {
      /**
       * @default LOW
       * @enum {string}
       */
      priority?: "HIGH" | "MEDIUM" | "LOW";
      isCompleted: boolean;
      title: string;
      description?: string;
      /** Format: date-time */
      deadline: string;
    };
    TaskEntity: {
      /** @enum {string} */
      priority: "HIGH" | "MEDIUM" | "LOW";
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      deletedAt: string | null;
      isDeleted: boolean;
      isCompleted: boolean;
      title: string;
      description: string;
      /** Format: date-time */
      deadline: string;
      userId: string;
    };
    UpdateTaskDto: {
      /**
       * @default LOW
       * @enum {string}
       */
      priority?: "HIGH" | "MEDIUM" | "LOW";
      isCompleted?: boolean;
      title?: string;
      description?: string;
      /** Format: date-time */
      deadline?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AuthController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterUserDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["MeEntity"];
        };
      };
    };
  };
  AuthController_login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthLoginDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["MeEntity"];
        };
      };
    };
  };
  AuthController_getProfile: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MeEntity"];
        };
      };
    };
  };
  AuthController_logout: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["MessageEntity"];
        };
      };
    };
  };
  TaskController_findAll: {
    parameters: {
      query?: {
        /** @description Task priority */
        priority?: "HIGH" | "MEDIUM" | "LOW";
        /** @description Task Deadline */
        deadline?: "PAST" | "TODAY" | "FUTURE";
        /** @description Sort By */
        sortBy?: "priority" | "deadline" | "updatedAt";
        /** @description Order By */
        orderBy?: "desc" | "asc";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskEntity"][];
        };
      };
    };
  };
  TaskController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTaskDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TaskEntity"];
        };
      };
    };
  };
  TaskController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskEntity"];
        };
      };
    };
  };
  TaskController_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTaskDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskEntity"];
        };
      };
    };
  };
  TaskController_remove: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskEntity"];
        };
      };
    };
  };
}
